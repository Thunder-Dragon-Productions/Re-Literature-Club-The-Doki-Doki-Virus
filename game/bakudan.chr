=============
PERSONAL INFO
=============
First name: Bakudan
Last name: [Classified]
Age: 19 years old
Birthday: [Classified]

Hometown: [Classified]
Address: [Classified]

===============
BIOLOGICAL INFO
===============
Hair color: Orange
Eye color: Orange
Height: 5'8"
Weight: 149 lbs

=========
EDUCATION
=========
School: Doki Doki High School
Affiliations: Drama Club [member, technician]

=========
GAME INFO
=========
Activities participated in:
- The Mystery in the Drama Club [video game; completed]
- The Drama Club's Doki Doki CyberForce RPG [video game; corrupted]
- Re:Literature Club! The Doki Doki Virus [video game expansion; in-session]

RPG classes used:
- School student (Lv. X)
- Digiranger (Lv. X)
- Dokiranger CyberOrange (Lv. 20) - "Explosive Bravery!" Power of Explosion!
- Tokuranger CyberTech (Lv. 20) - "Wisdom of the Scientist!" Power of Science!

Profile description: Bakudan is a senior technician of the Drama Club and one of Kosei's closest friends. He is also a trainer for junior technicians such as Denki.

Becoming one of the survivors from The Mystery in the Drama Club, Bakudan advanced to the Drama Club's next game, The Drama Club's Doki Doki CyberForce RPG. After joining CyberForce Network Security to battle against the Duran Empire, Bakudan was given Digiranger training and he received the CyberOrange DigiChanger, Model: Heart, allowing him to transform into Dokiranger CyberOrange, a Dokiranger class capable of digitally manipulating explosive energy.